#!/usr/bin/lua

local site = require 'gluon.site'
local uci = require('simple-uci').cursor()
local util = require 'gluon.util'
local wireless = require 'gluon.wireless'

-- Create wifi roles if they do not exist yet
local default_wifi_roles = {
	band_2g = {},
	band_5g = {},
}

-- enable client if it is not disabled
if site.wifi24.ap() and not site.wifi24.ap.disabled(false) then
	util.add_to_set(default_wifi_roles['band_2g'], 'client')
end

if site.wifi5.ap() and not site.wifi5.ap.disabled(false) then
	util.add_to_set(default_wifi_roles['band_5g'], 'client')
end

-- enable mesh if it is not disabled
if site.wifi24.mesh() and not site.wifi24.mesh.disabled(false) then
	util.add_to_set(default_wifi_roles['band_2g'], 'mesh')
end
if site.wifi5.mesh() and not site.wifi5.mesh.disabled(false) then
	util.add_to_set(default_wifi_roles['band_5g'], 'mesh')
end

local role_iface_names = {
	client = 'client_radio',
	mesh = 'mesh_radio',
	private = 'wan_radio',
}

local function migrate_wifi_to_roles(band)
	local band_roles = {}
	local config_exists = false
	wireless.foreach_radio(uci, function(radio)
		if radio.band ~= band then
			return
		end
		local radio_name = radio['.name']
		local suffix = radio_name:match('^radio(%d+)$')

		for role, iface_prefix in pairs(role_iface_names) do
			local iface_name = iface_prefix .. suffix
			if uci:get('wireless', iface_prefix .. suffix) then
				config_exists = true
				local role_disabled = uci:get('wireless', iface_prefix .. suffix, 'disabled') or 0
				if role_disabled == '0' then
					util.add_to_set(band_roles, role)
					if role == 'private' then
						local ssid = uci:get('wireless', iface_name, 'ssid')
						local key = uci:get('wireless', iface_name, 'key')
						local encryption = uci:get('wireless', iface_name, 'encryption')
						local mfp = uci:get('wireless', iface_name, 'ieee80211w')
						uci:set('gluon', 'wireless', 'private_ssid', ssid)
						uci:set('gluon', 'wireless', 'private_key', key)
						uci:set('gluon', 'wireless', 'private_encryption', encryption)
						uci:set('gluon', 'wireless', 'private_mfp', mfp)
					end
				end
			end
		end

		local txpower = uci:get('wireless', radio_name, 'txpower')
		if txpower ~= nil then
			uci:set('gluon', 'wireless', 'txpower_' .. radio['.name'], txpower)
		end

		if radio.band == '5g' then
			local outdoor_htmode = uci:get('gluon', 'wireless', 'outdoor_' .. radio['.name'] .. '_htmode')
			if outdoor_htmode ~= nil then
				uci:set('gluon', 'wireless', 'htmode_' .. radio['.name'], outdoor_htmode)
				uci:delete('gluon', 'wireless', 'outdoor_' .. radio['.name'] .. '_htmode')
			end
		end
	end)

	-- if no config exists for this band, we apply the default
	if not config_exists then
		band_roles = default_wifi_roles["band_" .. band]
	end

	uci:section('gluon', 'wireless_band', "band_" .. band, {
		role = band_roles,
	})
end

for band_name, _ in pairs(default_wifi_roles) do
	local raw_band = band_name:gsub("^band_", "")
	if not uci:get('gluon', band_name) and wireless.device_uses_band(uci, raw_band) then
		-- remove when upgrades are only possible from v2025.1 onwards
		migrate_wifi_to_roles(raw_band)
	end
end


local function is_outdoor()
	return uci:get_bool('gluon', 'wireless', 'outdoor')
end

-- Fix invalid mesh role configurations for outdoor
uci:foreach('gluon', 'wireless_band', function(band)
	local function has_role(role)
		if band.role == nil then
			return false
		end

		return util.contains(band.role, role)
	end

	if band['.name'].name=='5g' and has_role('mesh') and is_outdoor() then
		-- remove 'mesh' role
		util.remove_from_set(band.role, 'mesh')
		uci:set('gluon', band['.name'], 'role', band.role)
	end
end)

uci:save('gluon')
